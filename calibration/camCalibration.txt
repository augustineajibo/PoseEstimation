import numpy as np
import cv2 as cv
import glob

#### Find chessboard coners- object point and imag point #####
chessboardSize = (24,17)
frameSize = (1440,1080)

#prepare object points
criteria = (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, 30, 0.001)
objp = np.zeros((chessboardSize[0] * chessboardSize[1], 3),np.float32)
objp[:,:2] = np.mgrid[0:chessboardSize[0],0:chessboardSize[1]].T.reshape(-1,2)

#Array to store object points
objPoints = []
imgPoints = []

images = glob.glob("captured_images/*.jpg")


for image in images:
    print(image)
    img = cv.imread(image)
    gray = cv.cvtColor(img,cv.COLOR_BGR2GRAY)

    ret, corners = cv.findChessboardCorners(gray,chessboardSize,None)

    if ret == True:
        objPoints.append(objp)
        corners2 = cv.cornerSubPix(gray,corners,(11,11),(-1,-1),criteria)
        imgPoints.append(corners)

        # Draw and display the corners
        cv.drawChessboardCorners(img, chessboardSize, corners, ret)
        cv.imshow("img",img)
        cv.waitKey(1000)
cv.destroyAllWindows()

###Calibration ###
ret, cameraMatrix, dist, rvecs, tvecs = cv.calibrateCamera(objPoints, imgPoints,frameSize,None,None)
print("Camera Calibrated: ", ret)
print("\nCamera Matrix: ", cameraMatrix)
print("\nDistortion Parameters: ", dist)
print("\nRotation Vectors: ",rvecs)
print("\nTranslation Vectors: ",tvecs)

img = cv.imread("cali5.png")
h, w = img.shape[:2]
newCameraMatrix,roi=cv.getOptimalNewCameraMatrix(cameraMatrix, dist, (w,h),1, (w,h))

#Undistort
dst = cv.undistort(img, cameraMatrix, dist, None, newCameraMatrix)
# Crop the image
x,y,w,h = roi
dst = dst[y:y+h,x:x+w]
cv.imwrite("caliResult1.png", dst)

#Undistored with Remapping
mapx, mapy = cv.initUndistortRectifyMap(cameraMatrix, dist, None, newCameraMatrix, (w,h),5)
dst=cv.remap(img, mapx,mapy,cv.INTER_LINEAR)
x,y,w,h = roi
dst = dst[y:y+h,x:x+w]
cv.imwrite("caliResult2.png", dst)

# Reprojection Error
mean_error = 0

for i in range(len(objPoints)):
    imgPoints2, _ = cv.projectPoints(objPoints[i],rvecs[i],tvecs[i],cameraMatrix,dist)
    error = cv.norm(imgPoints[i], imgPoints2, cv.NORM_L2)/len(imgPoints2)
    mean_error += error
print("\ntotal error: {}".format(mean_error/len(objPoints)))
print("\n\n\n")



